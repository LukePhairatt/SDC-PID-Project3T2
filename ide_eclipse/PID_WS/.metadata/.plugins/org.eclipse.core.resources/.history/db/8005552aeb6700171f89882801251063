#include <uWS/uWS.h>
#include <iostream>
#include "json.hpp"
#include "PID.h"
#include <cmath>
#include <vector>
#include <chrono> // clock
typedef std::chrono::high_resolution_clock Clock;


// PID configuration setting
const bool pidTuning = false;
int n_try_tuning = 0;



// for convenience
using json = nlohmann::json;

// For converting back and forth between radians and degrees.
constexpr double pi() { return M_PI; }
double deg2rad(double x) { return x * pi() / 180; }
double rad2deg(double x) { return x * 180 / pi(); }
double normalise_angle(double angle) { return atan2(sin(angle),cos(angle)); }

// Checks if the SocketIO event has JSON data.
// If there is data the JSON object in string format will be returned,
// else the empty string "" will be returned.
std::string hasData(std::string s) {
  auto found_null = s.find("null");
  auto b1 = s.find_first_of("[");
  auto b2 = s.find_last_of("]");
  if (found_null != std::string::npos) {
    return "";
  }
  else if (b1 != std::string::npos && b2 != std::string::npos) {
    return s.substr(b1, b2 - b1 + 1);
  }
  return "";
}

int main()
{
  uWS::Hub h;
  // Initialize the pid variable.
  PID pid_steering;
  // bench mark quick 0.15,0.55,0.001 (0.17,0.60,0.002)
  // bench mark slow 0.08, 0.37, 0.001 fairly smooth line/curve
  // bench mark fast pace 35 mph 0.07,0.47,0.0012
  // bench mark fast pace 32 mph 0.10,0.45,0.001
  // adjusting gain according to steering angle? for smooth vs response?
  // low pass steering filter?
  const double Kp_s = 0.12;
  const double Kd_s = 0.45;
  const double Ki_s = 0.0012;
  pid_steering.Init(Kp_s, Ki_s, Kd_s);

  // bench mark 0.05,0.80,0.001
  PID pid_speed;
  const double Kp_t = 0.10;
  const double Kd_t = 0.90;
  const double Ki_t = 0.001;
  pid_speed.Init(Kp_t, Ki_t, Kd_t);

  // loop count
  static int counter = 0;


  // system timer
  auto new_msg = Clock::now();
  auto old_msg = Clock::now();

  h.onMessage([&pid_steering, &pid_speed, &new_msg, &old_msg](uWS::WebSocket<uWS::SERVER> ws, char *data, size_t length, uWS::OpCode opCode) {
    // "42" at the start of the message means there's a websocket message event.
    // The 4 signifies a websocket message
    // The 2 signifies a websocket event
    if (length && length > 2 && data[0] == '4' && data[1] == '2')
    {
      auto s = hasData(std::string(data).substr(0, length));
      if (s != "") {
        auto j = json::parse(s);
        std::string event = j[0].get<std::string>();
        if (event == "telemetry") {
          // j[1] is the data JSON object
          double cte = std::stod(j[1]["cte"].get<std::string>());
          double speed = std::stod(j[1]["speed"].get<std::string>());
          double angle = std::stod(j[1]["steering_angle"].get<std::string>());

          // init pid variables
          double steer_value;
          double throttle;

          /*
          * TODO: Calcuate steering value here, remember the steering value is
          * [-1, 1].
          * NOTE: Feel free to play around with the throttle and speed. Maybe use
          * another PID controller to control the speed!
          */

          new_msg = Clock::now();
          double duration = std::chrono::duration_cast<std::chrono::milliseconds>(new_msg - old_msg).count();
          old_msg = new_msg;
          //std::cout << "dt: " << duration << std::endl;

          /* -------------*/
          /* Steering PID */
          /* -------------*/
          // update pid error
          pid_steering.UpdateError(cte);
          // compute steering output
          steer_value = pid_steering.TotalError();
          // limit angle to e.g. [-1,1] radian about 60 degrees
          if(steer_value > 1.0){
            steer_value = 1.0;
          }
          else if(steer_value < -1.0){
            steer_value = -1.0;
          }

          std::cout << "run loop : " << counter << std::endl;
          //steering_avg[counter%w_size] = steer_value;
          //if(counter > 100)
          //{
          //  steer_value = std::accumulate( steering_avg.begin(), steering_avg.end(), 0.0)/w_size;
          //}
          counter++;

          // TODO - better pid tune react better and less cte
          //      - lower speed corner

          /* --------------*/
          /*    Speed PID  */
          /* --------------*/


          // 1- set target speed cruise to X mph- use pid to maintain output throttle
          //    note: without this, the speed may go beyond 30 mph, problem during cornering
          //    simply set low target speed and control it with throttle pid
          //    this method is easy to work with
          //    if cte > 0.3, it is time to reduce speed
          double set_speed;                                // mph
          counter < 150?set_speed = 15.0:set_speed = 35.0; // start slow (let pid to settle a bit) or using cte to check
          const double speed_err = speed - set_speed;      // speed error
          // update pid error
          pid_speed.UpdateError(speed_err);
          // compute steering output
          throttle = pid_speed.TotalError();
          // limit throttle to 0.35 max gas input (higher the faster to get up to speed but overshot may happen)
          if(throttle > 0.35){
            throttle = 0.35;
          }
          else if(throttle < 0.0){
        	  throttle = 0.0;
          }


          // about to swing at high speed error- no more speed please
          if(fabs(cte) > 0.4 && speed > 30.00) {
        	  throttle = 0.0;
          }

          // PID Tuning:
          if(pidTuning){
            // set how many times to run e.g. 20 tries or until dp doesn't change any more





          }

          // DEBUG- speed
          //std::cout << "throttle: " << throttle << " speed: " << speed << std::endl;

          // DEBUG- steering
          //std::cout << "CTE: " << cte << " Current steering: " << current_steering << " Cmd Steering: " << steer_value << std::endl;

          json msgJson;
          msgJson["steering_angle"] = steer_value;
          msgJson["throttle"] = throttle;
          auto msg = "42[\"steer\"," + msgJson.dump() + "]";
          // DEBUD- msg
          //std::cout << msg << std::endl;
          ws.send(msg.data(), msg.length(), uWS::OpCode::TEXT);
        }
      } else {
        // Manual driving
        std::string msg = "42[\"manual\",{}]";
        ws.send(msg.data(), msg.length(), uWS::OpCode::TEXT);
      }
    }
  });

  // We don't need this since we're not using HTTP but if it's removed the program
  // doesn't compile :-(
  h.onHttpRequest([](uWS::HttpResponse *res, uWS::HttpRequest req, char *data, size_t, size_t) {
    const std::string s = "<h1>Hello world!</h1>";
    if (req.getUrl().valueLength == 1)
    {
      res->end(s.data(), s.length());
    }
    else
    {
      // i guess this should be done more gracefully?
      res->end(nullptr, 0);
    }
  });

  h.onConnection([&h](uWS::WebSocket<uWS::SERVER> ws, uWS::HttpRequest req) {
    std::cout << "Connected!!!" << std::endl;
  });

  h.onDisconnection([&h](uWS::WebSocket<uWS::SERVER> ws, int code, char *message, size_t length) {
    ws.close();
    std::cout << "Disconnected" << std::endl;
  });

  int port = 4567;
  if (h.listen(port))
  {
    std::cout << "Listening to port " << port << std::endl;
  }
  else
  {
    std::cerr << "Failed to listen to port" << std::endl;
    return -1;
  }
  h.run();
}

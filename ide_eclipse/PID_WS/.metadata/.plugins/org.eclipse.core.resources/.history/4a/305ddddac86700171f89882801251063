#include "PID.h"

using namespace std;

/*
* TODO: Complete the PID class.
*/

PID::PID() {}

PID::~PID() {}

void PID::Init(double Kp, double Ki, double Kd) {
  PID::Kp = Kp;
  PID::Ki = Ki;
  PID::Kd = Kd;
}

void PID::UpdateError(double cte) {
  d_error = cte - p_error;
  i_error += cte;
  p_error = cte;
}

double PID::TotalError() {
  return -Kp * p_error  - Kd * d_error - Ki* i_error;
}

void PID::resetPID(double Kp, double Ki, double Kd) {
  Init(Kp,Ki,Kd);
  p_error = 0.0;
  i_error = 0.0;
  d_error = 0.0;
  old_rms_err = now_rms_err;
}

double PID::TunePIDTwiddle(const int counter, const double err){
  if(counter < 1000){
      // keep running on this current P,I,D to check rms error on this pid
      // record total mean error so far
	  now_rms_err += (err*err);
  }
  else{
	 // compute average rms
	 now_rms_err /= 1000;
     // time to try another P,I,D
     // reset pid and restart
  }

  return 0.0;
}

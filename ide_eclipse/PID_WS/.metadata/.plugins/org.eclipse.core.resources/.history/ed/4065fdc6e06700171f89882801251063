#ifndef PID_H
#define PID_H


#include <vector>

class PID {
public:
  /*
  * Errors
  */
  double p_error;
  double i_error;
  double d_error;

  /*
  * Coefficients
  */ 
  double Kp;
  double Ki;
  double Kd;

  /*
  * Constructor
  */
  PID();

  /*
  * Destructor.
  */
  virtual ~PID();

  /*
  * Initialize PID.
  */
  void Init(double Kp, double Ki, double Kd);

  /*
  * Update the PID error variables given cross track error.
  */
  void UpdateError(double cte);

  /*
  * Calculate the total PID error.
  */
  double TotalError();


  /*
   *  Reset PID errors and Gain (only for tuning)
   */
  void restartPID(double Kp, double Ki, double Kd);

  /*
   * Tuning pid using Twiddle
   */
  double TunePIDTwiddle(const double error);

  /*
   * Tuning Params
   */
  std::vector<double> dp = {0.01,0.01,0.0001};
  std::vector<double> p = {PID::Kp, PID::Kd, PID::Ki};
  int pid_i = 0;
  double best_rms_err = 0.0;
  double now_rms_err = 0.0;
  const int n_run = 1000;
  enum twiddle_state {DP_START, DP_UP, DP_DOWN, DP_STAY,DOING_BAD,DOING_GOOD};
  twiddle_state dp_state(DP_STAY);
  int n_count = 0;
};

#endif /* PID_H */

#include "PID.h"

using namespace std;

/*
* TODO: Complete the PID class.
*/

PID::PID() {}

PID::~PID() {}

void PID::Init(double Kp, double Ki, double Kd) {
  PID::Kp = Kp;
  PID::Ki = Ki;
  PID::Kd = Kd;
}

void PID::UpdateError(double cte) {
  d_error = cte - p_error;
  i_error += cte;
  p_error = cte;
}

double PID::TotalError() {
  return -Kp * p_error  - Kd * d_error - Ki* i_error;
}

void PID::resetPID(double Kp, double Ki, double Kd) {
  Init(Kp,Ki,Kd);
  p_error = 0.0;
  i_error = 0.0;
  d_error = 0.0;
  now_rms_err = 0.0;

}

double PID::TunePIDTwiddle(const int counter, const double err){
  if(counter < n_run){
      // keep running on this current P,I,D to check rms error on this pid
      // record total mean error so far
	  now_rms_err += (err*err);
  }
  else{

	 // compute average rms
	 now_rms_err /= (double)n_run;

     // time to try another P,I,D
	 // state engine: check what we did previously
	 // state start: then dp up
	 // state dp[i] up: if good, then in the next try dp[i] up again, else dp down

	 // state dp[i] down: if good, then in the next try dp[i] down again, else dp stay

	 // dp[i] stay: make dp smaller and start messing the next gain e.g. i+1


     // clear all error, set new dp and pid gain
	 if(now_rms_err < best_rms_err){
	   best_rms_err = now_rms_err;
	   //p[i] go up - run pid


	 }
	 else{
	   //p[i] go down- run pid

	   if (now_rms_err < best_rms_err){}
	     //p[i] stay
	   else{}


	 }


  }

  return 0.0;
}
